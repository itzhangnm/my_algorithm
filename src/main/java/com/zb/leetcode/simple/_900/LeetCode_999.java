package com.zb.leetcode.simple._900;

/**
 * 车的可用捕获量
 *
 * @author Zhang Bo
 * @date 2020/1/2 17:59
 */
public class LeetCode_999 {

    /**
     * 在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。
     * <p>
     * 车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。
     * <p>
     * 返回车能够在一次移动中捕获到的卒的数量。
     *  
     * <p>
     * 示例 1：
     * <p>
     * <p>
     * <p>
     * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
     * 输出：3
     * 解释：
     * 在本例中，车能够捕获所有的卒。
     * 示例 2：
     * <p>
     * <p>
     * <p>
     * 输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
     * 输出：0
     * 解释：
     * 象阻止了车捕获任何卒。
     * 示例 3：
     * <p>
     * <p>
     * <p>
     * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
     * 输出：3
     * 解释：
     * 车可以捕获位置 b5，d6 和 f5 的卒。
     *  
     * <p>
     * 提示：
     * <p>
     * board.length == board[i].length == 8
     * board[i][j] 可以是 'R'，'.'，'B' 或 'p'
     * 只有一个格子上存在 board[i][j] == 'R'
     * <p>
     * 来源：力扣（LeetCode_148）
     * 链接：https://leetcode-cn.com/problems/available-captures-for-rook
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     */

    public static void main(String[] args) {
        LeetCode_999 leetCode_999 = new LeetCode_999();
        System.out.println(leetCode_999.numRookCaptures(new char[][]{

                {'.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', 'p', '.', '.', '.', '.'},
                {'.', '.', '.', 'R', '.', '.', '.', 'p'},
                {'.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', 'p', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.'}

        }));
    }

    public int numRookCaptures(char[][] board) {
        int i = 0;
        int j = 0;
        a:
        while (i < board.length) {
            j = 0;
            while (j < board[0].length) {
                if (board[i][j] == 'R') {
                    break a;
                }
                j++;
            }
            i++;
        }
        int count = 0;
        for (int k = i + 1; k < board.length; k++) {
            if (board[k][j] == 'B') {
                break;
            } else if (board[k][j] == 'p') {
                count++;
                break;
            }
        }
        for (int k = i - 1; k >= 0; k--) {
            if (board[k][j] == 'B') {
                break;
            } else if (board[k][j] == 'p') {
                count++;
                break;
            }
        }
        for (int k = j + 1; k < board[0].length; k++) {
            if (board[i][k] == 'B') {
                break;
            } else if (board[i][k] == 'p') {
                count++;
                break;
            }
        }
        for (int k = j - 1; k >= 0; k--) {
            if (board[i][k] == 'B') {
                break;
            } else if (board[i][k] == 'p') {
                count++;
                break;
            }
        }
        return count;
    }
}
